#Annotation: annotation name
#  annotation arguments should be on the same line. Available arguments are:
#    * when = "text" - when to call handler
#        valid values:
#	        before  - call before function
#	        after   - call after function
#    * mod = "text" - module name
#    * func = "text" - function name
#    * success_code = integer - function return code to check for success
#    * obj_arg = integer - index of argument that holds object. "-1" means return argument
#    * obj_type = "text" - object type
#        valid values:
#           ptr - object is a pointer (e.g. void*)
#           pmemoid - object is object id from PMDK (e.g. PMEMoid). It takes 2 argument positions
#    * size_arg = integer - index of argument that holds object size. "-1" means return argument
#    * args_count = integer - number of arguments in that function


# ==================================================================================
# Indicates start of region where tool should begin tracking all calls to system API to
# map file to memory. Valid arguments: when, mod, func
annotation: mmap_begin
    when="before" mod="libpmem.so"    func="pmem_map_file"
    when="before" mod="libpmemobj.so" func="pmemobj_create"
    when="before" mod="libpmemobj.so" func="pmemobj_open"


# ==================================================================================
# Indicates end of region where tool should begin tracking all calls to system API to
# map file to memory. Valid arguments: when, mod, func
annotation: mmap_end
    when="after" mod="libpmem.so"    func="pmem_map_file"
    when="after" mod="libpmemobj.so" func="pmemobj_create"
    when="after" mod="libpmemobj.so" func="pmemobj_open"


# ==================================================================================
# Indicates start of region where tool should stop tracking all calls to system API to
# map file to memory. Valid arguments: when, mod, func
annotation: munmap_begin
    when="before" mod="libpmem.so"      func="pmem_unmap"
    when="before" mod="libpmemobj.so"   func="pmemobj_close"

# ==================================================================================
# Indicates end of region where tool should stop tracking all calls to system API to
# map file to memory. Valid arguments: when, mod, func
annotation: munmap_end
    when="after" mod="libpmem.so"       func="pmem_unmap"
    when="after" mod="libpmemobj.so"    func="pmemobj_close"


# ==================================================================================
# Indicates beginning of region where all stores into persistent memory are
# considered as atomic stores

annotation: atomic_store_begin
    when="before" mod="libpmemobj" func="pmemobj_list_insert"
    when="before" mod="libpmemobj" func="pmemobj_list_insert_new"
    when="before" mod="libpmemobj" func="pmemobj_list_remove"
    when="before" mod="libpmemobj" func="pmemobj_list_move"
    when="before" mod="libpmemobj" func="pmemobj_alloc"
    when="before" mod="libpmemobj" func="pmemobj_zalloc"
    when="before" mod="libpmemobj" func="pmemobj_realloc"
    when="before" mod="libpmemobj" func="pmemobj_zrealloc"
    when="before" mod="libpmemobj" func="pmemobj_strdup"
    when="before" mod="libpmemobj" func="pmemobj_free"
    when="before" mod="libpmemobj" func="pmemobj_tx_alloc"
    when="before" mod="libpmemobj" func="pmemobj_tx_zalloc"
    when="before" mod="libpmemobj" func="pmemobj_tx_realloc"
    when="before" mod="libpmemobj" func="pmemobj_tx_zrealloc"
    when="before" mod="libpmemobj" func="pmemobj_tx_strdup"
    when="before" mod="libpmemobj" func="pmemobj_tx_commit"
    when="before" mod="libpmemobj" func="pmemobj_tx_free"
    when="before" mod="libpmemobj" func="pmemobj_tx_add_range_direct"
    when="before" mod="libpmemobj" func="pmemobj_tx_xadd_range_direct"
    when="before" mod="libpmemobj" func="pmemobj_tx_add_range"
    when="before" mod="libpmemobj" func="pmemobj_tx_xadd_range"
    when="before" mod="libpmemobj" func="pmemobj_root_construct"
    when="before" mod="libpmemobj" func="pmemobj_open"
    when="before" mod="libpmemobj" func="pmemobj_close"
    when="before" mod="libpmemobj" func="pmemobj_create"


# ==================================================================================
# Indicates end of region where all stores into persistent memory are
# considered as atomic stores. Valid arguments: when, mod, func

annotation: atomic_store_end
    when="after" mod="libpmemobj" func="pmemobj_list_insert"
    when="after" mod="libpmemobj" func="pmemobj_list_insert_new"
    when="after" mod="libpmemobj" func="pmemobj_list_remove"
    when="after" mod="libpmemobj" func="pmemobj_list_move"
    when="after" mod="libpmemobj" func="pmemobj_alloc"
    when="after" mod="libpmemobj" func="pmemobj_zalloc"
    when="after" mod="libpmemobj" func="pmemobj_realloc"
    when="after" mod="libpmemobj" func="pmemobj_zrealloc"
    when="after" mod="libpmemobj" func="pmemobj_strdup"
    when="after" mod="libpmemobj" func="pmemobj_free"
    when="after" mod="libpmemobj" func="pmemobj_tx_alloc"
    when="after" mod="libpmemobj" func="pmemobj_tx_zalloc"
    when="after" mod="libpmemobj" func="pmemobj_tx_realloc"
    when="after" mod="libpmemobj" func="pmemobj_tx_zrealloc"
    when="after" mod="libpmemobj" func="pmemobj_tx_strdup"
    when="after" mod="libpmemobj" func="pmemobj_tx_commit"
    when="after" mod="libpmemobj" func="pmemobj_tx_free"
    when="after" mod="libpmemobj" func="pmemobj_tx_add_range_direct"
    when="after" mod="libpmemobj" func="pmemobj_tx_xadd_range_direct"
    when="after" mod="libpmemobj" func="pmemobj_tx_add_range"
    when="after" mod="libpmemobj" func="pmemobj_tx_xadd_range"
    when="after" mod="libpmemobj" func="pmemobj_root_construct"
    when="after" mod="libpmemobj" func="pmemobj_open"
    when="after" mod="libpmemobj" func="pmemobj_close"
    when="after" mod="libpmemobj" func="pmemobj_create"


# ==================================================================================
# Indicates beginning of region where new object is allocated in persistent memory
# Valid arguments: when, mod, func

annotation: pmem_allocation_begin
    when="before" mod="libpmemobj" func="pmemobj_realloc"
    when="before" mod="libpmemobj" func="pmemobj_zrealloc"
    when="before" mod="libpmemobj" func="pmemobj_strdup"
    when="before" mod="libpmemobj" func="pmemobj_tx_realloc"
    when="before" mod="libpmemobj" func="pmemobj_tx_zrealloc"
    when="before" mod="libpmemobj" func="pmemobj_tx_strdup"


# ==================================================================================
# Indicates end of region where new object is allocated in persistent memory
# Valid arguments: when, mod, func

annotation: pmem_allocation_end
    when="after" mod="libpmemobj" func="pmemobj_realloc"
    when="after" mod="libpmemobj" func="pmemobj_zrealloc"
    when="after" mod="libpmemobj" func="pmemobj_strdup"
    when="after" mod="libpmemobj" func="pmemobj_tx_realloc"
    when="after" mod="libpmemobj" func="pmemobj_tx_zrealloc"
    when="after" mod="libpmemobj" func="pmemobj_tx_strdup"


# ==================================================================================
# Assume that application adding specified memory region to undo log in current transaction
# Valid arguments: mod, func, success_code, obj_arg, obj_type, size_arg
# Optional arguments: offset_arg

annotation: tx_add_undo_region
    mod="libpmemobj" func="pmemobj_tx_add_range_direct" success_code=0 obj_arg=0 obj_type="ptr" size_arg=1
    mod="libpmemobj" func="pmemobj_tx_xadd_range_direct" success_code=0 obj_arg=0 obj_type="ptr" size_arg=1
    mod="libpmemobj" func="pmemobj_tx_add_range" success_code=0 obj_arg=0 obj_type="pmemoid" offset_arg=2 size_arg=3
    mod="libpmemobj" func="pmemobj_tx_xadd_range" success_code=0 obj_arg=0 obj_type="pmemoid" offset_arg=2 size_arg=3


# ==================================================================================
# Handle memory block allocation in PMDK explicitly
# Valid arguments: mod, func, obj_arg, obj_type, size_arg, success_code

annotation: pmem_allocation
    mod="libpmemobj" func="pmemobj_tx_alloc" obj_arg=-1 obj_type="pmemoid" size_arg=0
    mod="libpmemobj" func="pmemobj_tx_zalloc" obj_arg=-1 obj_type="pmemoid" size_arg=0
    mod="libpmemobj" func="pmemobj_alloc" obj_arg=1 obj_type="pmemoid" size_arg=2 success_code=0
    mod="libpmemobj" func="pmemobj_zalloc" obj_arg=1 obj_type="pmemoid" size_arg=2 success_code=0

# ==================================================================================
# Handle memory block deallocation in PMDK explicitly
# Valid arguments: mod, func, obj_arg, obj_type

annotation: pmem_deallocation
    mod="libpmemobj" func="pmemobj_free" obj_arg=0 obj_type="pmemoid"
    mod="libpmemobj" func="pmemobj_tx_free" obj_arg=0 obj_type="pmemoid"
