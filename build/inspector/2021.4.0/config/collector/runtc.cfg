<?xml version="1.0" encoding="UTF-8"?>
<bag
  xmlns:boolean="http://www.w3.org/2001/XMLSchema#boolean"
  xmlns:int="http://www.w3.org/2001/XMLSchema#int"
  xmlns:double="http://www.w3.org/2001/XMLSchema#double"
  >

  <prerequisites/>

  <knobs
    xmlns:boolean="http://www.w3.org/2001/XMLSchema#boolean"
    xsl:version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:exsl="http://exslt.org/common"
    exsl:keep_exsl_namespace=""
    syntax="norules">

    <booleanKnob id="cknob_check_deadlock" cliName="detect-deadlocks" displayName="runtc.cknob_check_deadlock.name">
      <description>runtc.cknob_check_deadlock.description</description>
      <boolean:defaultValue>false</boolean:defaultValue>
    </booleanKnob>

    <booleanKnob id="cknob_terminate_on_deadlock" cliName="terminate-on-deadlock" displayName="runtc.cknob_terminate_on_deadlock.name">
      <description>runtc.cknob_terminate_on_deadlock.description</description>
      <boolean:defaultValue>false</boolean:defaultValue>
      <knobProperty name="active_state">cknob_check_deadlock=parent_value</knobProperty>
      <boolean:knobProperty name="parent_value">true</boolean:knobProperty>
    </booleanKnob>

    <booleanKnob id="cknob_check_potential_deadlock" cliName="detect-lock-hierarchy-violations" displayName="runtc.cknob_check_potential_deadlock.name">
      <description>runtc.cknob_check_potential_deadlock.description</description>
      <boolean:defaultValue>true</boolean:defaultValue>
      <knobProperty name="active_state">cknob_check_deadlock=parent_value</knobProperty>
      <boolean:knobProperty name="parent_value">true</boolean:knobProperty>
    </booleanKnob>

    <booleanKnob id="cknob_save_stack_on_lock_creation" cliName="save-stack-on-lock-creation" displayName="runtc.cknob_save_stack_on_lock_creation.name">
      <description>runtc.cknob_save_stack_on_lock_creation.description</description>
      <boolean:defaultValue>true</boolean:defaultValue>
    </booleanKnob>

    <enumKnob id="cknob_check_cross_thread_stack_access" cliName="cross-thread-stack-access-detection" displayName="runtc.cknob_check_cross_thread_stack_access.name">
      <description>runtc.cknob_check_cross_thread_stack_access.description</description>
      <values>
        <value cliName="none" displayName="runtc.cknob_check_cross_thread_stack_access.opt1.name">opt1</value>
        <value cliName="warnings" displayName="runtc.cknob_check_cross_thread_stack_access.opt2.name">opt2</value>
        <value cliName="problems" displayName="runtc.cknob_check_cross_thread_stack_access.opt3.name">opt3</value>
        <defaultValue>opt1</defaultValue>
      </values>
      <knobProperty name="active_state">cknob_check_datarace=parent_value</knobProperty>
      <boolean:knobProperty name="parent_value">true</boolean:knobProperty>
    </enumKnob>

    <intKnob id="cknob_stack_depth" cliName="stack-depth" displayName="runxx.cknob_stack_depth.name">
      <description>runtc.cknob_stack_depth.description</description>
      <int:defaultValue>1</int:defaultValue>
      <int:min>1</int:min>
      <int:max>100</int:max>
    </intKnob>

    <booleanKnob id="cknob_check_datarace" cliName="detect-races" displayName="runtc.cknob_check_datarace.name">
      <description>runtc.cknob_check_datarace.description</description>
      <boolean:defaultValue>false</boolean:defaultValue>
    </booleanKnob>

    <enumKnob id="cknob_resolution" cliName="granularity-in-bytes" displayName="runtc.cknob_resolution.name">
      <description>runtc.cknob_resolution.description</description>
      <values>
        <value cliName="4" displayName="runtc.cknob_resolution.standard.name">standard</value>
        <value cliName="2" displayName="runtc.cknob_resolution.fine.name">fine</value>
        <value cliName="1" displayName="runtc.cknob_resolution.superfine.name">superfine</value>
        <defaultValue>fine</defaultValue>
      </values>
      <knobProperty name="active_state">cknob_check_datarace=parent_value</knobProperty>
      <boolean:knobProperty name="parent_value">true</boolean:knobProperty>
    </enumKnob>

    <booleanKnob id="cknob_detect_races_on_stack_access" cliName="detect-races-on-stacks" displayName="runtc.cknob_detect_races_on_stack_access.name">
      <description>runtc.cknob_detect_races_on_stack_access.description
      </description>
      <boolean:defaultValue>false</boolean:defaultValue>
      <knobProperty name="active_state">cknob_check_datarace=parent_value</knobProperty>
      <boolean:knobProperty name="parent_value">true</boolean:knobProperty>
    </booleanKnob>

    <booleanKnob id="cknob_remove_duplicates" cliName="remove-duplicates" displayName="runxx.remove_duplicates.name">
      <description>runxx.remove_duplicates.description</description>
      <boolean:defaultValue>true</boolean:defaultValue>
    </booleanKnob>

    <booleanKnob id="cknob_defer_memory_check" cliName="defer-memory-tracing" displayName="runtc.cknob_defer_memory_check.name" boolean:visible="false">
      <description>runtc.cknob_defer_memory_check.description</description>
      <boolean:defaultValue>true</boolean:defaultValue>
      <knobProperty name="active_state">cknob_check_datarace=parent_value</knobProperty>
      <boolean:knobProperty name="parent_value">true</boolean:knobProperty>
    </booleanKnob>

    <booleanKnob id="cknob_save_stack_on_allocation" cliName="save-stack-on-allocation" displayName="runtc.cknob_save_stack_on_allocation.name">
      <description>runtc.cknob_save_stack_on_allocation.description</description>
      <boolean:defaultValue>false</boolean:defaultValue>
      <knobProperty name="active_state">cknob_check_datarace=parent_value</knobProperty>
      <boolean:knobProperty name="parent_value">true</boolean:knobProperty>
    </booleanKnob>

    <booleanKnob id="cknob_use_maximum_resources" cliName="use-maximum-resources" displayName="runtc.cknob_use_maximum_resources.name">
      <description>runtc.cknob_use_maximum_resources.description</description>
      <boolean:defaultValue>false</boolean:defaultValue>
      <knobProperty name="active_state">cknob_check_datarace=parent_value</knobProperty>
      <boolean:knobProperty name="parent_value">true</boolean:knobProperty>
    </booleanKnob>

    <booleanKnob id="cknob_save_stack_on_first_access" cliName="save-stack-on-first-access" displayName="runtc.cknob_save_stack_on_first_access.name">
      <description>runtc.cknob_save_stack_on_first_access.description</description>
      <boolean:defaultValue>false</boolean:defaultValue>
      <knobProperty name="active_state">cknob_check_datarace=parent_value</knobProperty>
      <boolean:knobProperty name="parent_value">true</boolean:knobProperty>
    </booleanKnob>

    <booleanKnob id="cknob_filter_guaranteed_atomics" cliName="filter-guaranteed-atomics" displayName="runtc.cknob_filter_guaranteed_atomics.name">
      <description>runtc.cknob_filter_guaranteed_atomics.description</description>
      <boolean:defaultValue>false</boolean:defaultValue>
      <knobProperty name="active_state">cknob_check_datarace=parent_value</knobProperty>
      <boolean:knobProperty name="parent_value">true</boolean:knobProperty>
    </booleanKnob>
  </knobs>

  <analysis
    xsl:version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:str="http://exslt.org/strings"
    xmlns:exsl="http://exslt.org/common"
    str:keep_str_namespace=""
    exsl:keep_exsl_namespace=""
    syntax="norules">

    <collector id="runtc" displayName="collector.tc.name">
      <binaryName>runtc</binaryName>
      <boolean:requestContextValues>false</boolean:requestContextValues>
      <boolean:supportSearchDirs>false</boolean:supportSearchDirs>
      <property name="helpId">intel.che.nem.analysis_type_custom_pane_f3130</property>

      <boolean:collectorOption option="check-deadlock">
        <xsl:if test="not (exsl:ctx('cknob_check_deadlock'))">
          <xsl:attribute name="option">no-check-deadlock</xsl:attribute>
        </xsl:if>
      </boolean:collectorOption>

      <boolean:collectorOption option="check-potential-deadlock">
        <xsl:if test="not (exsl:ctx('cknob_check_potential_deadlock'))">
          <xsl:attribute name="option">no-check-potential-deadlock</xsl:attribute>
        </xsl:if>
      </boolean:collectorOption>

      <boolean:collectorOption option="save-stack-on-lock-creation">
        <xsl:if test="not (exsl:ctx('cknob_save_stack_on_lock_creation'))">
          <xsl:attribute name="option">no-save-stack-on-lock-creation</xsl:attribute>
        </xsl:if>
      </boolean:collectorOption>

      <boolean:collectorOption option="check-datarace">
        <xsl:if test="not (exsl:ctx('cknob_check_datarace'))">
          <xsl:attribute name="option">no-check-datarace</xsl:attribute>
        </xsl:if>
      </boolean:collectorOption>

      <boolean:collectorOption option="terminate-on-deadlock">
        <xsl:if test="not (exsl:ctx('cknob_terminate_on_deadlock'))">
          <xsl:attribute name="option">no-terminate-on-deadlock</xsl:attribute>
        </xsl:if>
      </boolean:collectorOption>

      <collectorOption option="resolution">
        <xsl:value-of select="exsl:ctx('cknob_resolution')"/>
      </collectorOption>

      <boolean:collectorOption option="check-stack-access">
        <xsl:if test="not (exsl:ctx('cknob_detect_races_on_stack_access'))">
          <xsl:attribute name="option">no-check-stack-access</xsl:attribute>
        </xsl:if>
      </boolean:collectorOption>

      <xsl:if test="(exsl:ctx('cknob_filter_guaranteed_atomics'))">
        <boolean:collectorOption option="filter-guaranteed-atomics"/>
      </xsl:if>

      <collectorOption option="stack-depth">
        <xsl:value-of select="exsl:ctx('cknob_stack_depth')"/>
      </collectorOption>

      <xsl:if test="not (exsl:ctx('cknob_use_maximum_resources'))">
        <int:collectorOption option="sampling-budget">5</int:collectorOption>
        <collectorOption option="1cell-mode">last-write</collectorOption>
        <collectorOption option="tool">tclcore</collectorOption>
      </xsl:if>

      <xsl:if test="(exsl:ctx('cknob_use_maximum_resources')) or not (exsl:ctx('cknob_defer_memory_check'))">
        <boolean:collectorOption option="defer-memory-check">false</boolean:collectorOption>
      </xsl:if>

      <!-- Only if dataraces are checked we pass values of these two options to collector. -->
      <boolean:collectorOption option="no-save-stack-on-first-access">
        <xsl:if test="(exsl:ctx('cknob_check_datarace')) and (exsl:ctx('cknob_save_stack_on_first_access'))">
          <xsl:attribute name="option">save-stack-on-first-access</xsl:attribute>
        </xsl:if>
      </boolean:collectorOption>

      <boolean:collectorOption option="no-save-stack-on-allocation">
        <xsl:if test="(exsl:ctx('cknob_check_datarace')) and (exsl:ctx('cknob_save_stack_on_allocation'))">
          <xsl:attribute name="option">save-stack-on-allocation</xsl:attribute>
        </xsl:if>
      </boolean:collectorOption>

      <!-- Process CTSA knob. -->
      <xsl:if test="exsl:ctx('cknob_check_cross_thread_stack_access') = 'opt1'">
        <boolean:collectorOption option="check-cross-thread-stack-access">false</boolean:collectorOption>
      </xsl:if>
      <xsl:if test="exsl:ctx('cknob_check_cross_thread_stack_access') = 'opt2'">
        <boolean:collectorOption option="check-cross-thread-stack-access">true</boolean:collectorOption>
        <boolean:collectorOption option="emit-ctsa-diagnostics">false</boolean:collectorOption>
      </xsl:if>
      <xsl:if test="exsl:ctx('cknob_check_cross_thread_stack_access') = 'opt3'">
        <boolean:collectorOption option="check-cross-thread-stack-access">true</boolean:collectorOption>
        <boolean:collectorOption option="emit-ctsa-diagnostics">true</boolean:collectorOption>
      </xsl:if>
      <!-- End of CTSA knob. -->

      <!-- Begin debug options -->
      <xsl:choose>
        <xsl:when test="exsl:ctx('targetOS') = 'Windows'">
          <!-- Windows -->
          <xsl:if test="exsl:ctx('CLIENT_ID') = 'VS'">
            <!-- VS integration -->
            <xsl:if test="exsl:ctx('appdebug') = 'on-start'">
              <collectorOption option="appdebug">vsdbg-on-start</collectorOption>
            </xsl:if>
            <xsl:if test="exsl:ctx('appdebug') = 'on-error'">
              <collectorOption option="appdebug">vsdbg-on-error</collectorOption>
            </xsl:if>
            <xsl:if test="exsl:ctx('appdebug') = 'delay-analysis'">
              <collectorOption option="appdebug">vsdbg-on-start</collectorOption>
              <collectorOption option="analysis-mode">lite</collectorOption>
            </xsl:if>
          </xsl:if>
        </xsl:when>
        <xsl:otherwise>
          <!-- Linux -->
          <collectorOption option="appdebug">
            <xsl:choose>
              <xsl:when test="exsl:ctx('appdebug') = 'delay-analysis'">
                on-start
              </xsl:when>
              <xsl:otherwise>
                <xsl:value-of select="exsl:ctx('appdebug')"/>
              </xsl:otherwise>
            </xsl:choose>
          </collectorOption>
          <xsl:if test="exsl:ctx('appdebug') = 'delay-analysis'">
            <collectorOption option="analysis-mode">lite</collectorOption>
          </xsl:if>
          <collectorOption option="suppress-breakpoints"/>
        </xsl:otherwise>
      </xsl:choose>

      <xsl:if test="exsl:ctx('debug_this_problem') != ''">
        <collectorOption option="breakpoint-file">
          <xsl:value-of select="exsl:ctx('debug_this_problem')"/>
        </collectorOption>
      </xsl:if>

      <xsl:if test="not (exsl:ctx('targetOS') = 'Windows' or exsl:ctx('appdebug') = 'off')">
        <xsl:choose>
          <xsl:when test="exsl:ctx('debug_using') = 'custom'">
            <xsl:if test="not (exsl:ctx('custom_debugger') = '')">
              <collectorOption option="debug-using">
                <xsl:value-of select="exsl:ctx('custom_debugger')"/>
              </collectorOption>
            </xsl:if>
          </xsl:when>
          <xsl:otherwise>
            <collectorOption option="debug-using">
              <xsl:value-of select="exsl:ctx('debug_using')"/>
            </collectorOption>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:if>
      <!-- end debug options -->

      <!-- Begin close-console option -->
      <xsl:if test="exsl:ctx('targetOS') = 'Windows' and exsl:ctx('appdebug') = 'off' and not (exsl:ctx('CLIENT_ID') = 'CLI')">
        <collectorOption option="no-close-console"/>
      </xsl:if>
      <!-- end close-console option -->

      <xsl:if test="exsl:ctx('process_for_analysis') != ''">
        <collectorOption option="executable-of-interest">
          <xsl:value-of select="exsl:ctx('process_for_analysis')"/>
        </collectorOption>
      </xsl:if>

      <collectorOption option="offload-target">
        <xsl:value-of select="exsl:ctx('offload_target')"/>
      </collectorOption>

      <xsl:if test="not (exsl:ctx('cknob_remove_duplicates'))">
        <boolean:collectorOption option="report-all-instances">true</boolean:collectorOption>
      </xsl:if>

      <xsl:if test="exsl:ctx('modules') != ''">
        <collectorOption option="include-module">
          <xsl:if test="exsl:ctx('modules_switch') = 'knob.modules_switch.exclude'">
            <xsl:attribute name="option">exclude-module</xsl:attribute>
          </xsl:if>
          <xsl:text>$modules</xsl:text>
        </collectorOption>
      </xsl:if>

      <xsl:if test="exsl:ctx('heartbeat')">
        <collectorOption option="heartbeat">1</collectorOption>
      </xsl:if>

      <!-- Setting 'recheck' to some value should trigger an error if appdebug != off -->
      <xsl:if test="not (exsl:ctx('recheck') = '' or exsl:ctx('appdebug') = 'off')">
        <xsl:choose>
          <xsl:when test="exsl:ctx('targetOS') = 'Windows'">
            <!-- Windows -->
            <xsl:if test="exsl:ctx('CLIENT_ID') = 'VS'">
              <!-- VS integration -->
              <error>knob.appdebug.recheck.error</error>
            </xsl:if>
          </xsl:when>
          <xsl:otherwise>
            <!-- Linux -->
            <error>knob.appdebug.recheck.error</error>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:if>
    </collector>

    <xsl:if test="exsl:ctx('traceMpi', 0)">
      <collectorOption option="itt-config">preload</collectorOption>
    </xsl:if>

  </analysis>

  <!-- vim: set ft=xml sts=2 sw=2 et : -->
</bag>
