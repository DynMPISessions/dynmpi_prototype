<?xml version="1.0" encoding="UTF-8"?>
<bag
  xmlns:boolean="http://www.w3.org/2001/XMLSchema#boolean"
  xmlns:int="http://www.w3.org/2001/XMLSchema#int"
  xmlns:double="http://www.w3.org/2001/XMLSchema#double"
  >

  <prerequisites/>

  <knobs
    xmlns:boolean="http://www.w3.org/2001/XMLSchema#boolean"
    xsl:version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:exsl="http://exslt.org/common"
    exsl:keep_exsl_namespace=""
    syntax="norules">
    <!-- The following are collector low-level knobs which are shown as read-only knobs during
          editing predefined analysis type and as read-write knobs when editing custom analysis type.
          The high-level knobs from analysis type are mapped to these low-level ones. -->

    <booleanKnob id="cknob_detect_leaks_on_exit" cliName="detect-leaks-on-exit" displayName="runmc.cknob_detect_leaks_on_exit.name">
      <description>runmc.cknob_detect_leaks_on_exit.description</description>
      <boolean:defaultValue>true</boolean:defaultValue>
    </booleanKnob>

    <!-- deprecated -->
    <booleanKnob id="cknob_detect_memory_leaks" cliName="detect-memory-leaks" displayName="runmc.cknob_detect_memory_leaks.name" boolean:visible="false">
      <description>runmc.cknob_detect_memory_leaks.description</description>
      <boolean:defaultValue>false</boolean:defaultValue>
    </booleanKnob>

    <booleanKnob id="cknob_detect_leaks_on_demand" cliName="enable-on-demand-leak-detection" displayName="runmc.cknob_detect_leaks_on_demand.name">
      <description>runmc.cknob_detect_leaks_on_demand.description</description>
      <boolean:defaultValue>true</boolean:defaultValue>
    </booleanKnob>

    <booleanKnob id="cknob_detect_resource_leaks" cliName="detect-resource-leaks" displayName="runmc.cknob_detect_resource_leaks.name" boolean:visible="false">
      <!-- attention targetOS is not known here So using hostOS variable -->
      <xsl:if test="exsl:ctx('hostOS') = 'Windows'">
        <xsl:attribute name="boolean:visible">true</xsl:attribute>
      </xsl:if>
      <description>runmc.cknob_detect_resource_leaks.description</description>
      <boolean:defaultValue>false</boolean:defaultValue>
    </booleanKnob>

    <booleanKnob id="cknob_still_allocated_memory" cliName="still-allocated-memory" displayName="runmc.cknob_still_allocated_memory.name">
      <description>runmc.cknob_still_allocated_memory.description</description>
      <boolean:defaultValue>false</boolean:defaultValue>
    </booleanKnob>

    <booleanKnob id="cknob_detect_invalid_accesses" cliName="detect-invalid-accesses" displayName="runmc.cknob_detect_invalid_accesses.name">
      <description>runmc.cknob_detect_invalid_accesses.description</description>
      <boolean:defaultValue>false</boolean:defaultValue>
    </booleanKnob>

    <booleanKnob id="cknob_analyze_stack" cliName="analyze-stack" displayName="runmc.cknob_analyze_stack.name">
      <description>runmc.cknob_analyze_stack.description</description>
      <boolean:defaultValue>false</boolean:defaultValue>
      <knobProperty name="active_state">cknob_detect_invalid_accesses=parent_value</knobProperty>
      <boolean:knobProperty name="parent_value">true</boolean:knobProperty>
    </booleanKnob>

    <booleanKnob id="cknob_dangling_pointer_check" cliName="enable-dangling-pointer-check" displayName="runmc.cknob_dangling_pointer_check.name">
      <description>runmc.cknob_dangling_pointer_check.description</description>
      <boolean:defaultValue>false</boolean:defaultValue>
      <knobProperty name="active_state">cknob_detect_invalid_accesses=parent_value</knobProperty>
      <boolean:knobProperty name="parent_value">true</boolean:knobProperty>
    </booleanKnob>

    <enumKnob id="cknob_byte_limit" cliName="byte-limit" displayName="runmc.cknob_byte_limit.name">
      <description>runmc.cknob_byte_limit.description</description>
      <values>
        <value cliName="10K">runmc.cknob_byte_limit.10K</value>
        <value cliName="100K">runmc.cknob_byte_limit.100K</value>
        <value cliName="1M">runmc.cknob_byte_limit.1M</value>
        <value cliName="10M">runmc.cknob_byte_limit.10M</value>
        <value cliName="100M">runmc.cknob_byte_limit.100M</value>
        <defaultValue>runmc.cknob_byte_limit.1M</defaultValue>
      </values>
      <knobProperty name="active_state">cknob_dangling_pointer_check=parent_value</knobProperty>
      <boolean:knobProperty name="parent_value">true</boolean:knobProperty>
    </enumKnob>

    <booleanKnob id="cknob_guard_zones" cliName="enable-guard-zones" displayName="runmc.cknob_guard_zones.name">
      <description>runmc.cknob_guard_zones.description</description>
      <boolean:defaultValue>false</boolean:defaultValue>

      <knobProperty name="active_state">cknob_detect_invalid_accesses=parent_value</knobProperty>
      <boolean:knobProperty name="parent_value">true</boolean:knobProperty>
    </booleanKnob>

    <enumKnob id="cknob_guard_zone_size" cliName="guard-zone-size" displayName="runmc.cknob_guard_zone_size.name">
      <description>runmc.cknob_guard_zone_size.description</description>
      <values>
        <value cliName="8">runmc.cknob_guard_zone_size.8</value>
        <value cliName="16">runmc.cknob_guard_zone_size.16</value>
        <value cliName="32">runmc.cknob_guard_zone_size.32</value>
        <value cliName="64">runmc.cknob_guard_zone_size.64</value>
        <value cliName="128">runmc.cknob_guard_zone_size.128</value>
        <defaultValue>runmc.cknob_guard_zone_size.32</defaultValue>
      </values>
      <knobProperty name="active_state">cknob_guard_zones=parent_value</knobProperty>
      <boolean:knobProperty name="parent_value">true</boolean:knobProperty>
    </enumKnob>

    <intKnob id="cknob_stack_depth" cliName="stack-depth" displayName="runxx.cknob_stack_depth.name">
      <description>runmc.cknob_stack_depth.description</description>
      <int:defaultValue>12</int:defaultValue>
      <int:min>1</int:min>
      <int:max>100</int:max>
    </intKnob>

    <booleanKnob id="cknob_remove_duplicates" cliName="remove-duplicates" displayName="runxx.remove_duplicates.name">
      <description>runxx.remove_duplicates.description</description>
      <boolean:defaultValue>true</boolean:defaultValue>
    </booleanKnob>

    <intKnob id="cknob_leak_maximum" cliName="leak-maximum" displayName="runmc.cknob_leak_maximum.name">
      <description>runmc.cknob_leak_maximum.description</description>
      <int:defaultValue>100000</int:defaultValue>
      <int:min>0</int:min>
      <int:max>2000000000</int:max>
    </intKnob>

    <booleanKnob id="cknob_enable_memory_growth_detection" cliName="enable-memory-growth-detection" displayName="runmc.cknob_enable_memory_growth_detection.name">
      <description>runmc.cknob_enable_memory_growth_detection.description</description>
      <boolean:defaultValue>false</boolean:defaultValue>
    </booleanKnob>

  </knobs>

  <analysis xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:str="http://exslt.org/strings"
    xmlns:exsl="http://exslt.org/common"
    str:keep_str_namespace=""
    exsl:keep_exsl_namespace=""
    syntax="norules">

    <collector id="runmc" displayName="collector.mc.name">
      <binaryName>runmc</binaryName>
      <boolean:requestContextValues>false</boolean:requestContextValues>
      <boolean:supportSearchDirs>false</boolean:supportSearchDirs>
      <property name="helpId">intel.che.nem.analysis_type_custom_pane_f3130</property>

      <boolean:collectorOption option="access-checks">
        <xsl:if test="not (exsl:ctx('cknob_detect_invalid_accesses'))">
          <xsl:attribute name="option">no-access-checks</xsl:attribute>
        </xsl:if>
      </boolean:collectorOption>

      <boolean:collectorOption option="analyze-stack">
        <xsl:if test="not (exsl:ctx('cknob_analyze_stack'))">
          <xsl:attribute name="option">no-analyze-stack</xsl:attribute>
        </xsl:if>
      </boolean:collectorOption>

      <collectorOption option="leak-maximum">
        <xsl:value-of select="exsl:ctx('cknob_leak_maximum')"/>
      </collectorOption>

      <!-- This rule, like -leak-check-only, is deprecated. -->
      <xsl:if test="not (exsl:ctx('cknob_detect_invalid_accesses')) and (exsl:ctx('cknob_detect_leaks_on_exit') or exsl:ctx('cknob_detect_memory_leaks'))">
        <boolean:collectorOption option="leak-check-only">
          <xsl:if test="not (exsl:ctx('cknob_detect_leaks_on_exit'))">
            <xsl:attribute name="option">no-leak-check-only</xsl:attribute>
          </xsl:if>
        </boolean:collectorOption>
      </xsl:if>

      <xsl:if test="exsl:ctx('cknob_detect_leaks_on_exit') or exsl:ctx('cknob_detect_memory_leaks')">
        <collectorOption option="leak-check-on-exit">
          <xsl:if test="not (exsl:ctx('cknob_detect_leaks_on_exit'))">
            <xsl:attribute name="option">no-leak-check-on-exit</xsl:attribute>
          </xsl:if>
        </collectorOption>
      </xsl:if>

      <xsl:if test="exsl:ctx('cknob_detect_leaks_on_demand') = 'true'">
        <collectorOption option="leak-check-on-demand"/>
      </xsl:if>

      <xsl:if test="exsl:ctx('cknob_detect_resource_leaks')">
        <collectorOption option="check-resource-leaks"/>
      </xsl:if>

      <xsl:if test="exsl:ctx('cknob_still_allocated_memory')">
        <collectorOption option="leak-check-report-reachable"/>
      </xsl:if>

      <collectorOption option="freelist-vol">
        <xsl:choose>
          <xsl:when test="exsl:ctx('cknob_dangling_pointer_check')">
            <xsl:choose>
              <xsl:when test="exsl:ctx('cknob_byte_limit') = 'runmc.cknob_byte_limit.10K'" >10000</xsl:when>
              <xsl:when test="exsl:ctx('cknob_byte_limit') = 'runmc.cknob_byte_limit.100K'">100000</xsl:when>
              <xsl:when test="exsl:ctx('cknob_byte_limit') = 'runmc.cknob_byte_limit.1M'"  >1000000</xsl:when>
              <xsl:when test="exsl:ctx('cknob_byte_limit') = 'runmc.cknob_byte_limit.10M'" >10000000</xsl:when>
              <xsl:when test="exsl:ctx('cknob_byte_limit') = 'runmc.cknob_byte_limit.100M'">100000000</xsl:when>
              <xsl:otherwise>0</xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:otherwise>0</xsl:otherwise>
        </xsl:choose>
      </collectorOption>

      <collectorOption option="guard-zone-size">
        <xsl:choose>
          <xsl:when test="exsl:ctx('cknob_guard_zones')">
            <xsl:choose>
              <xsl:when test="exsl:ctx('cknob_guard_zone_size') = 'runmc.cknob_guard_zone_size.8'"  >8</xsl:when>
              <xsl:when test="exsl:ctx('cknob_guard_zone_size') = 'runmc.cknob_guard_zone_size.16'" >16</xsl:when>
              <xsl:when test="exsl:ctx('cknob_guard_zone_size') = 'runmc.cknob_guard_zone_size.32'" >32</xsl:when>
              <xsl:when test="exsl:ctx('cknob_guard_zone_size') = 'runmc.cknob_guard_zone_size.64'" >64</xsl:when>
              <xsl:when test="exsl:ctx('cknob_guard_zone_size') = 'runmc.cknob_guard_zone_size.128'">128</xsl:when>
              <xsl:otherwise>0</xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:otherwise>0</xsl:otherwise>
        </xsl:choose>
      </collectorOption>

      <!-- Begin debug options -->
      <xsl:choose>
        <xsl:when test="not (exsl:ctx('targetOS') = 'Windows') and
                  (exsl:ctx('cknob_detect_leaks_on_exit') or exsl:ctx('cknob_detect_memory_leaks')) and
                  not (exsl:ctx('cknob_detect_invalid_accesses'))">
          <!-- Debugger not supported -->
          <xsl:if test="not (exsl:ctx('appdebug') = 'off')">
            <error>knob.appdebug.error</error>
          </xsl:if>
        </xsl:when>
        <xsl:otherwise>
          <!-- Debugger supported -->
          <xsl:choose>
            <xsl:when test="exsl:ctx('targetOS') = 'Windows'">
              <!-- Windows -->
              <xsl:if test="exsl:ctx('CLIENT_ID') = 'VS'">
                <!-- VS integration -->
                <xsl:if test="exsl:ctx('appdebug') = 'on-start'">
                  <collectorOption option="appdebug">vsdbg-on-start</collectorOption>
                </xsl:if>
                <xsl:if test="exsl:ctx('appdebug') = 'on-error'">
                  <collectorOption option="appdebug">vsdbg-on-error</collectorOption>
                </xsl:if>
                <xsl:if test="exsl:ctx('appdebug') = 'delay-analysis'">
                  <collectorOption option="appdebug">vsdbg-on-start</collectorOption>
                  <collectorOption option="analysis-mode">lite</collectorOption>
                </xsl:if>
              </xsl:if>
            </xsl:when>
            <xsl:otherwise>
              <!-- Linux -->
              <collectorOption option="appdebug">
                <xsl:choose>
                  <xsl:when test="exsl:ctx('appdebug') = 'delay-analysis'">
                    on-start
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="exsl:ctx('appdebug')"/>
                  </xsl:otherwise>
                </xsl:choose>
              </collectorOption>
              <xsl:if test="exsl:ctx('appdebug') = 'delay-analysis'">
                <collectorOption option="analysis-mode">lite</collectorOption>
              </xsl:if>
              <collectorOption option="suppress-breakpoints"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:otherwise>
      </xsl:choose>

      <xsl:choose>
        <xsl:when test="exsl:ctx('debug_this_problem') = ''">
          <collectorOption option="stack-depth">
            <xsl:value-of select="exsl:ctx('cknob_stack_depth')"/>
          </collectorOption>
        </xsl:when>
        <xsl:otherwise>
          <collectorOption option="breakpoint-file">
            <xsl:value-of select="exsl:ctx('debug_this_problem')"/>
          </collectorOption>
          <collectorOption option="stack-depth">32</collectorOption>
        </xsl:otherwise>
      </xsl:choose>

      <xsl:if test="not (exsl:ctx('targetOS') = 'Windows' or exsl:ctx('appdebug') = 'off')">
        <xsl:choose>
          <xsl:when test="exsl:ctx('debug_using') = 'custom'">
            <xsl:if test="exsl:ctx('custom_debugger') != ''">
              <collectorOption option="debug-using">
                <xsl:value-of select="exsl:ctx('custom_debugger')"/>
              </collectorOption>
            </xsl:if>
          </xsl:when>
          <xsl:otherwise>
            <collectorOption option="debug-using">
              <xsl:value-of select="exsl:ctx('debug_using')"/>
            </collectorOption>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:if>
      <!-- end debug options -->

      <!-- Begin close-console option -->
      <xsl:if test="(exsl:ctx('targetOS') = 'Windows') and (exsl:ctx('appdebug') = 'off') and not (exsl:ctx('CLIENT_ID') = 'CLI')">
        <collectorOption option="no-close-console"/>
      </xsl:if>
      <!-- end close-console option -->

      <xsl:if test="exsl:ctx('process_for_analysis') != ''">
        <collectorOption option="executable-of-interest">
          <xsl:value-of select="exsl:ctx('process_for_analysis')"/>
        </collectorOption>
      </xsl:if>

      <collectorOption option="offload-target">
        <xsl:value-of select="exsl:ctx('offload_target')"/>
      </collectorOption>

      <xsl:if test="not (exsl:ctx('cknob_remove_duplicates'))">
        <boolean:collectorOption option="report-all-instances">true</boolean:collectorOption>
      </xsl:if>

      <xsl:if test="exsl:ctx('modules') != ''">
        <collectorOption option="include-module">
          <xsl:if test="exsl:ctx('modules_switch') = 'knob.modules_switch.exclude'">
            <xsl:attribute name="option">exclude-module</xsl:attribute>
          </xsl:if>
          <xsl:text>$modules</xsl:text>
        </collectorOption>
      </xsl:if>

      <xsl:if test="exsl:ctx('heartbeat')">
        <collectorOption option="heartbeat">1</collectorOption>
      </xsl:if>

      <xsl:if test="exsl:ctx('cknob_enable_memory_growth_detection')">
        <boolean:collectorOption option="enable-memory-growth"/>
      </xsl:if>

      <!-- Setting 'recheck' to some value should trigger an error if appdebug != off -->
      <xsl:if test="not (exsl:ctx('recheck') = '' or exsl:ctx('appdebug') = 'off')">
        <xsl:choose>
          <xsl:when test="exsl:ctx('targetOS') = 'Windows'">
            <!-- Windows -->
            <xsl:if test="exsl:ctx('CLIENT_ID') = 'VS'">
              <!-- VS integration -->
              <error>knob.appdebug.recheck.error</error>
            </xsl:if>
          </xsl:when>
          <xsl:otherwise>
            <!-- Linux -->
            <error>knob.appdebug.recheck.error</error>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:if>
    </collector>

    <xsl:if test="exsl:ctx('traceMpi', 0)">
      <collectorOption option="itt-config">preload</collectorOption>
    </xsl:if>

  </analysis>

  <!-- vim: set ft=xml sts=2 sw=2 et : -->
</bag>
