# Annotation rules for user api

# All functions that are marked as "Filtered" are wrappers for real
# functions that we hook (or don't hook).   Filtering has the important
# function of turning off buffering of events so we won't see any 
# underlying basic block, memory, or call events that are "inside" 
# the annotation but can't be filtered by module (ie. they are 
# implemented in the user executable and not libittnotify.

# TODO: determine if these are needed and if any can be removed.
#      Hooking them doesn't really hurt since they will only 
#      actually be hooked if they are used....and they make the
#      fact that they exist as invisible as possible to the tool.

# These ADVISOR_ANNOTATE_mp... functions appear in user code.
# We filter them so that intermediate frames don't appear in the callstack.
Filtered = (
               Module = "*",
               Function = "ADVISOR_ANNOTATE_mp_ANNOTATE_SITE_BEGIN",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

Filtered = (
               Module = "*",
               Function = "ADVISOR_ANNOTATE_mp_ANNOTATE_SITE_END",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

Filtered = (
               Module = "*",
               Function = "ADVISOR_ANNOTATE_mp_ANNOTATE_ITERATION_TASK",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

Filtered = (
               Module = "*",
               Function = "ADVISOR_ANNOTATE_mp_ANNOTATE_TASK_BEGIN",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

Filtered = (
               Module = "*",
               Function = "ADVISOR_ANNOTATE_mp_ANNOTATE_TASK_END",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

Filtered = (
               Module = "*",
               Function = "advisor_annotate_mp_annotate_site_begin_",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

Filtered = (
               Module = "*",
               Function = "advisor_annotate_mp_annotate_site_end_",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

TaskBegin = (
               Module = "*",
               Function = "advisor_annotate_mp_annotate_task_begin_",
               CallingConvention = cdecl,
               ParametersOfInterest = (
                              Name = (3, pointer),
               ),
               Succeed = (always),
);

TaskEnd = (
               Module = "*",
               Function = "advisor_annotate_mp_annotate_task_end_",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

SampleStart = (
               Module = "libittnotify",
               Function = "__itt_model_site_begin",
               CallingConvention = cdecl,
               ParametersOfInterest = (
                   Name = (3, pointer),
               ),
               Succeed = (always),
);

SampleStop = (
               Module = "libittnotify",
               Function = "__itt_model_site_end",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

TaskBegin = (
               Module = "libittnotify",
               Function = "__itt_model_task_begin",
               CallingConvention = cdecl,
               ParametersOfInterest = (
                              Name = (3, pointer),
               ),
               Succeed = (always),
);

# Not sure if we need this
Filtered = (
               Module = "libittnotify",
               Function = "__itt_model_task_beginA",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

TaskEnd = (
               Module = "libittnotify",
               Function = "__itt_model_task_end",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

