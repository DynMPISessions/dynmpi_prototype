# Annotation rules for user api

#All functions that are marked as "Filtered" are wrappers for real
#functions that we hook (or don't hook).   Filtering has the important
#function of turning off buffering of events so we won't see any 
#underlying basic block, memory, or call events that are "inside" 
#the annotation but can't be filtered by module (ie. they are 
#implemented in the user executable and not libittnotify.
Filtered = (
               Module = "*",
               Function = "__annotate_routines_init",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

Filtered = (
               Module = "*",
               Function = "__annotate_routines",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

Filtered = (
               Module = "*",
               Function = "ADVISOR_ANNOTATE_mp_ANNOTATE_SITE_BEGIN",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

Filtered = (
               Module = "*",
               Function = "ADVISOR_ANNOTATE_mp_ANNOTATE_SITE_END",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

Filtered = (
               Module = "*",
               Function = "ADVISOR_ANNOTATE_mp_ANNOTATE_ITERATION_TASK",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

Filtered = (
               Module = "*",
               Function = "ADVISOR_ANNOTATE_mp_ANNOTATE_TASK_BEGIN",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

Filtered = (
               Module = "*",
               Function = "ADVISOR_ANNOTATE_mp_ANNOTATE_TASK_END",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

Filtered = (
               Module = "*",
               Function = "ADVISOR_ANNOTATE_mp_ANNOTATE_LOCK_ACQUIRE",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

Filtered = (
               Module = "*",
               Function = "ADVISOR_ANNOTATE_mp_ANNOTATE_LOCK_RELEASE",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

Filtered = (
               Module = "*",
               Function = "advisor_annotate_mp_annotate_site_begin_",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

Filtered = (
               Module = "*",
               Function = "advisor_annotate_mp_annotate_site_end_",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

Filtered = (
               Module = "*",
               Function = "advisor_annotate_mp_annotate_iteration_task_",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

Filtered = (
               Module = "*",
               Function = "advisor_annotate_mp_annotate_task_begin_",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

Filtered = (
               Module = "*",
               Function = "advisor_annotate_mp_annotate_task_end_",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

Filtered = (
               Module = "*",
               Function = "advisor_annotate_mp_annotate_lock_acquire_",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

Filtered = (
               Module = "*",
               Function = "advisor_annotate_mp_annotate_lock_release_",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

Filtered = (
               Module = "libittnotify",
               Function = "__itt_model_task_beginW",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

Filtered = (
               Module = "libittnotify",
               Function = "__itt_model_task_beginA",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

Filtered = (
               Module = "libittnotify",
               Function = "__itt_model_task_beginAL",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

Filtered = (
               Module = "libittnotify",
               Function = "__itt_iteration_taskW",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

Filtered = (
               Module = "libittnotify",
               Function = "__itt_model_iteration_taskA",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

Filtered = (
               Module = "libittnotify",
               Function = "__itt_model_iteration_taskAL",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

Filtered = (
               Module = "libittnotify",
               Function = "__itt_model_site_beginW",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

Filtered = (
               Module = "libittnotify",
               Function = "__itt_model_site_beginA",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

Filtered = (
               Module = "libittnotify",
               Function = "__itt_model_site_beginAL",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

ModelBeginSite = (
               Module = "libittnotify",
               Function = "__itt_model_site_begin",
               CallingConvention = cdecl,
               ParametersOfInterest = (
                              Name = (3, pointer),
               ),
               Succeed = (always),
);

ModelEndSite = (
               Module = "libittnotify",
               Function = "__itt_model_site_end",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

ModelBeginTask = (
               Module = "libittnotify",
               Function = "__itt_model_task_begin",
               CallingConvention = cdecl,
               ParametersOfInterest = (
                              Name = (3, pointer),
               ),
               Succeed = (always),
);

ModelEndTask = (
               Module = "libittnotify",
               Function = "__itt_model_task_end",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

ModelAcquireLock = (
               Module = "libittnotify",
               Function = "__itt_model_lock_acquire",
               CallingConvention = cdecl,
               ParametersOfInterest = (
                              Lock = (1, pointer),
               ),
               Succeed = (always),
);

ModelReleaseLock = (
               Module = "libittnotify",
               Function = "__itt_model_lock_release",
               CallingConvention = cdecl,
               ParametersOfInterest = (
                              Lock = (1, pointer),
               ),
               Succeed = (always),
);

ModelAllocation = (
               Module = "libittnotify",
               Function = "__itt_model_record_allocation",
               CallingConvention = cdecl,
               ParametersOfInterest = (
                              Allocated = (1, pointer),
                              Size = (2, pointer),
               ),
               Succeed = (always),
);

ModelDeallocation = (
               Module = "libittnotify",
               Function = "__itt_model_record_deallocation",
               CallingConvention = cdecl,
               ParametersOfInterest = (
                              Address = (1, pointer),
               ),
               Succeed = (always),
);

ModelObserveUses = (
               Module = "libittnotify",
               Function = "__itt_model_observe_uses",
               CallingConvention = cdecl,
               ParametersOfInterest = (
                              Address = (1, pointer),
                              Size = (2, pointer),
               ),
               Succeed = (always),
);

ModelInductionUses = (
               Module = "libittnotify",
               Function = "__itt_model_induction_uses",
               CallingConvention = cdecl,
               ParametersOfInterest = (
                              Address = (1, pointer),
                              Size = (2, pointer),
               ),
               Succeed = (always),
);

ModelReductionUses = (
               Module = "libittnotify",
               Function = "__itt_model_reduction_uses",
               CallingConvention = cdecl,
               ParametersOfInterest = (
                              Address = (1, pointer),
                              Size = (2, pointer),
               ),
               Succeed = (always),
);

ModelClearUses = (
               Module = "libittnotify",
               Function = "__itt_model_clear_uses",
               CallingConvention = cdecl,
               ParametersOfInterest = (
                              Address = (1, pointer),
               ),
               Succeed = (always),
);

ModelDisablePush = (
               Module = "libittnotify",
               Function = "__itt_model_disable_push",
               CallingConvention = cdecl,
               ParametersOfInterest = (
                              Type = (1, uint),
               ),
               Succeed = (always),
);

ModelDisablePop = (
               Module = "libittnotify",
               Function = "__itt_model_disable_pop",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

Filtered = (
               Module = "*",
               Function = "Annotate::SiteBegin",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

Filtered = (
               Module = "*",
               Function = "Annotate::SiteEnd",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

Filtered = (
               Module = "*",
               Function = "Annotate::LockAcquire",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

Filtered = (
               Module = "*",
               Function = "Annotate::LockRelease",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

Filtered = (
               Module = "*",
               Function = "Annotate::AggregateTask",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

Filtered = (
               Module = "*",
               Function = "Annotate::TaskBegin",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

Filtered = (
               Module = "*",
               Function = "Annotate::TaskEnd",
               CallingConvention = cdecl,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);
