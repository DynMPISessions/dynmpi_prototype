# Annotation rules for memory allocators/deallocators (Linux)

# C allocators
Malloc = (
            Module = "libc.so",
            Function = "malloc",
            CallingConvention = cdecl,
            ParametersOfInterest = (
                            Size = (1, uint),
                            Allocated = (return, pointer),
            ),
            ReturnOfInterest = (return, pointer),
            Succeed = (!=0),
);
Malloc = (
            Module = "libc.so",
            Function = "posix_memalign",
            CallingConvention = cdecl,
            ParametersOfInterest = (
                            Size = (3, uint),
                            Allocated = (*1, pointer),
            ),
            ReturnOfInterest = (*1, pointer),
            Succeed = (always),
);
Malloc = (
            Module = "libc.so",
            Function = "memalign",
            CallingConvention = cdecl,
            ParametersOfInterest = (
                            Size = (2, uint),
                            Allocated = (return, pointer),
            ),
            ReturnOfInterest = (return, pointer),
            Succeed = (!=0),
);
Calloc = (
            Module = "libc.so",
            Function = "calloc",
            CallingConvention = cdecl,
            ParametersOfInterest = (
                            Count = (1, uint),
                            Size = (2, uint),
                            Allocated = (return, pointer),
            ),
            ReturnOfInterest = (return, pointer),
            Succeed = (!=0),
);
Realloc = (
            Module = "libc.so",
            Function = "realloc",
            CallingConvention = cdecl,
            ParametersOfInterest = (
                            Address = (1, pointer),
                            Size = (2, uint),
                            Allocated = (return, pointer),
            ),
            ReturnOfInterest = (return, pointer),
            Succeed = (!=0),
);
Recalloc = (
            Module = "libc.so",
            Function = "recalloc",
            CallingConvention = cdecl,
            ParametersOfInterest = (
                            Address = (1, pointer),
                            Count = (2, uint),
                            Size = (3, uint),
                            Allocated = (return, pointer),
            ),
            ReturnOfInterest = (return, pointer),
            Succeed = (!=0),
);
Free = (
            Module = "libc.so",
            Function = "free",
            CallingConvention = cdecl,
            ParametersOfInterest = (
                            Address = (1, pointer),
            ),
            Succeed = (always),
);
Free = (
            Module = "libc.so",
            Function = "__free",
            CallingConvention = cdecl,
            ParametersOfInterest = (
                            Address = (1, pointer),
            ),
            Succeed = (always),
);
Free = (
            Module = "libc.so",
            Function = "__cfree",
            CallingConvention = cdecl,
            ParametersOfInterest = (
                            Address = (1, pointer),
            ),
            Succeed = (always),
);

# Standard TBB scalable allocators
Malloc = (
            Module = "*",
            Function = "scalable_malloc",
            CallingConvention = cdecl,
            ParametersOfInterest = (
                            Size = (1, uint),
                            Allocated = (return, pointer),
            ),
            ReturnOfInterest = (return, pointer),
            Succeed = (!=0),
);
Calloc = (
            Module = "*",
            Function = "scalable_calloc",
            CallingConvention = cdecl,
            ParametersOfInterest = (
                            Count = (1, uint),
                            Size = (2, uint),
                            Allocated = (return, pointer),
            ),
            ReturnOfInterest = (return, pointer),
            Succeed = (!=0),
);
Realloc = (
            Module = "*",
            Function = "scalable_realloc",
            CallingConvention = cdecl,
            ParametersOfInterest = (
                            Address = (1, pointer),
                            Size = (2, uint),
                            Allocated = (return, pointer),
            ),
            ReturnOfInterest = (return, pointer),
            Succeed = (!=0),
);
Free = (
            Module = "*",
            Function = "scalable_free",
            CallingConvention = cdecl,
            ParametersOfInterest = (
                            Address = (1, pointer),
            ),
            Succeed = (always),
);

# Scalable aligned TBB allocators
Malloc = (
            Module = "*",
            Function = "scalable_aligned_malloc",
            CallingConvention = cdecl,
            ParametersOfInterest = (
                            Size = (1, uint),
                            Allocated = (return, pointer),
            ),
            ReturnOfInterest = (return, pointer),
            Succeed = (!=0),
);
Realloc = (
            Module = "*",
            Function = "scalable_aligned_realloc",
            CallingConvention = cdecl,
            ParametersOfInterest = (
                            Address = (1, pointer),
                            Size = (2, uint),
                            Allocated = (return, pointer),
            ),
            ReturnOfInterest = (return, pointer),
            Succeed = (!=0),
);
Free = (
            Module = "*",
            Function = "scalable_aligned_free",
            CallingConvention = cdecl,
            ParametersOfInterest = (
                            Address = (1, pointer),
            ),
            Succeed = (always),
);

# Standard operators new and delete
Malloc = (
            Module = "*",
            Function = "operator new(unsigned long)",
            CallingConvention = cdecl,
            ParametersOfInterest = (
                            Size = (1, uint),
                            Allocated = (return, pointer),
            ),
            ReturnOfInterest = (return, pointer),
            Succeed = (!=0),
);
Malloc = (
            Module = "*",
            Function = "operator new(unsigned long, std::nothrow_t const&)",
            CallingConvention = cdecl,
            ParametersOfInterest = (
                            Size = (1, uint),
                            Allocated = (return, pointer),
            ),
            ReturnOfInterest = (return, pointer),
            Succeed = (!=0),
);
Malloc = (
            Module = "*",
            Function = "operator new(unsigned int)",
            CallingConvention = cdecl,
            ParametersOfInterest = (
                            Size = (1, uint),
                            Allocated = (return, pointer),
            ),
            ReturnOfInterest = (return, pointer),
            Succeed = (!=0),
);
Malloc = (
            Module = "*",
            Function = "operator new(unsigned int, std::nothrow_t const&)",
            CallingConvention = cdecl,
            ParametersOfInterest = (
                            Size = (1, uint),
                            Allocated = (return, pointer),
            ),
            ReturnOfInterest = (return, pointer),
            Succeed = (!=0),
);
Free = (
            Module = "*",
            Function = "operator delete(void*)",
            CallingConvention = cdecl,
            ParametersOfInterest = (
                            Address = (1, pointer),
            ),
            Succeed = (always),
);
Free = (
            Module = "*",
            Function = "operator delete(void*, std::nothrow_t const&)",
            CallingConvention = cdecl,
            ParametersOfInterest = (
                            Address = (1, pointer),
            ),
            Succeed = (always),
);
Malloc = (
            Module = "*",
            Function = "operator new[](unsigned long)",
            CallingConvention = cdecl,
            ParametersOfInterest = (
                            Size = (1, uint),
                            Allocated = (return, pointer),
            ),
            ReturnOfInterest = (return, pointer),
            Succeed = (!=0),
);
Malloc = (
            Module = "*",
            Function = "operator new[](unsigned long, std::nothrow_t const&)",
            CallingConvention = cdecl,
            ParametersOfInterest = (
                            Size = (1, uint),
                            Allocated = (return, pointer),
            ),
            ReturnOfInterest = (return, pointer),
            Succeed = (!=0),
);
Malloc = (
            Module = "*",
            Function = "operator new[](unsigned int)",
            CallingConvention = cdecl,
            ParametersOfInterest = (
                            Size = (1, uint),
                            Allocated = (return, pointer),
            ),
            ReturnOfInterest = (return, pointer),
            Succeed = (!=0),
);
Malloc = (
            Module = "*",
            Function = "operator new[](unsigned int, std::nothrow_t const&)",
            CallingConvention = cdecl,
            ParametersOfInterest = (
                            Size = (1, uint),
                            Allocated = (return, pointer),
            ),
            ReturnOfInterest = (return, pointer),
            Succeed = (!=0),
);
Free = (
            Module = "*",
            Function = "operator delete[](void*)",
            CallingConvention = cdecl,
            ParametersOfInterest = (
                            Address = (1, pointer),
            ),
            Succeed = (always),
);
Free = (
            Module = "*",
            Function = "operator delete[](void*, std::nothrow_t const&)",
            CallingConvention = cdecl,
            ParametersOfInterest = (
                            Address = (1, pointer),
            ),
            Succeed = (always),
);

# Intel Fortran dynamic allocator/deallocator
Malloc = (
            Module = "*",
            Function = "for_alloc_allocatable",
            CallingConvention = cdecl,
            ParametersOfInterest = (
                            Size = (1, pointer),
                            Allocated = (*2, pointer),
            ),
            ReturnOfInterest = (*2, pointer),
            Succeed = (always),
);
Free = (
            Module = "*",
            Function = "for_dealloc_allocatable",
            CallingConvention = cdecl,
            ParametersOfInterest = (
                            Address = (1, pointer),
            ),
            Succeed = (always),
);
Malloc = (
            Module = "*",
            Function = "for_allocate",
            CallingConvention = cdecl,
            ParametersOfInterest = (
                            Size = (1, pointer),
                            Allocated = (*2, pointer),
            ),
            ReturnOfInterest = (*2, pointer),
            Succeed = (always),
);
Free = (
            Module = "*",
            Function = "for_deallocate",
            CallingConvention = cdecl,
            ParametersOfInterest = (
                            Address = (1, pointer),
            ),
            Succeed = (always),
);

# CCRT library allocators
Malloc = (
            Module = "libsaccrt.so",
            Function = "__CcMalloc",
            CallingConvention = cdecl,
            ParametersOfInterest = (
                            Size = (2, uint),
                            Allocated = (return, pointer),
            ),
            ReturnOfInterest = (return, pointer),
            Succeed = (!=0),
);

Free = (
            Module = "libsaccrt.so",
            Function = "__CcFree",
            CallingConvention = cdecl,
            ParametersOfInterest = (
                            Address = (1, pointer),
            ),
            Succeed = (always),
);


# OpenCL library allocators
Malloc = (
            Module = "libOpenCL.so.1",
            Function = "clSVMAlloc",
            CallingConvention = cdecl,
            ParametersOfInterest = (
                            Size = (3, uint),
                            Allocated = (return, pointer),
            ),
            ReturnOfInterest = (return, pointer),
            Succeed = (!=0),
);

Free = (
            Module = "libOpenCL.so.1",
            Function = "clSVMFree",
            CallingConvention = cdecl,
            ParametersOfInterest = (
                            Address = (1, pointer),
            ),
            Succeed = (always),
);

AssociatePtr = (
            Module = "libomptarget.so",
            Function = "DeviceTy::associatePtr",
            CallingConvention = cdecl,
            ParametersOfInterest = (
                            SrcPtr = (1, pointer),
                            DstPtr = (2, pointer),
                            Size = (3, uint),
            ),
            Succeed = (==0),
);

AssociatePtr = (
            Module = "libomptarget.so",
            Function = "DeviceTy::getOrAllocTgtPtr",
            CallingConvention = cdecl,
            ParametersOfInterest = (
                            SrcPtr = (2, pointer),
                            DstPtr = (return, pointer),
                            Size = (4, uint),
            ),
            ReturnOfInterest = (return, pointer),
            Succeed = (!=0),
);
