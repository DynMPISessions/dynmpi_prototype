# Annotation rules for Intel OpenCL threading APIs


###############################################################################
# OclNonReentrantSpinMutex
CreateMutex = (
               Module = "*",
               Function = "Intel::OpenCL::Utils::OclNonReentrantSpinMutex::OclNonReentrantSpinMutex",
               CallingConvention = thiscall,
               ParametersOfInterest = (
                              Mutex = (this, pointer),
               ),
               Succeed = (always),
);

DestroyMutex = (
               Module = "*",
               Function = "Intel::OpenCL::Utils::OclNonReentrantSpinMutex::~OclNonReentrantSpinMutex",
               CallingConvention = thiscall, 
               ParametersOfInterest = (
                              Mutex = (this, pointer),
               ),
               Succeed = (always), 
);

AcquireMutex =  (
               Module = "*",
               Function = "Intel::OpenCL::Utils::OclNonReentrantSpinMutex::Lock",
               CallingConvention = thiscall,
               ParametersOfInterest = (
                              Mutex = (this, pointer),
               ),
               Succeed = (always),
);
       
ReleaseMutex = (
               Module = "*",
               Function = "Intel::OpenCL::Utils::OclNonReentrantSpinMutex::Unlock",
               CallingConvention = thiscall,
               ParametersOfInterest = (
                              Mutex = (this, pointer),
               ),
               Succeed = (always),
);

###############################################################################
# OclEvent

CreateEvent = (
               Module = "libintelocl",
               Function = "Intel::OpenCL::Framework::OclEvent::OclEvent",
               CallingConvention = thiscall,
               ParametersOfInterest = (
                              Event = (this, pointer),
               ),
               Succeed = (always),
);

DestroyEvent = (
               Module = "libintelocl",
               Function = "Intel::OpenCL::Framework::OclEvent::~OclEvent",
               CallingConvention = thiscall,
               ParametersOfInterest = (
                              Event = (this, pointer),
               ),
               Succeed = (always),
);

WaitForEvent = (
               Module = "libintelocl",
               Function = "Intel::OpenCL::Framework::OclEvent::Wait",
               CallingConvention = thiscall,
               ParametersOfInterest = (
                              Event = (this, pointer),
               ),
               Succeed = (always),
);

SignalEvent = (
               Module = "libintelocl",
               Function = "Intel::OpenCL::Framework::OclEvent::NotifyComplete",
               CallingConvention = thiscall,
               ParametersOfInterest = (
                              Event = (this, pointer),
               ),
               Succeed = (always),
);


###############################################################################
# Filters

Filtered = (
               Module = "libOclCpuBackEnd.so",
               Function = "emutls_get_index",
               CallingConvention = stdcall,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);

Filtered = (
               Module = "libOclCpuBackEnd.so",
               Function = "__opencl_emutls_get_address",
               CallingConvention = stdcall,
               ParametersOfInterest = (
               ),
               Succeed = (always),
);
