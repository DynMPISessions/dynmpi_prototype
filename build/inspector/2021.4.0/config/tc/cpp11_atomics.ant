# Annotation rules for c++11 atomics APIs on windows


###########################################################################################
# std::atomic_flag class

OrderedLoadStore = (
               Module = "*",
               Function = "std::atomic_flag::test_and_set",
               CallingConvention = thiscall,
               ParametersOfInterest = (
                              Object = (this, pointer),
                              Order = (1, int),
               ),
               Succeed = (always),
);

OrderedStore = (
               Module = "*",
               Function = "std::atomic_flag::clear",
               CallingConvention = thiscall,
               ParametersOfInterest = (
                              Object = (this, pointer),
                              Order = (1, int),
               ),
               Succeed = (always),
);

###########################################################################################
# std::__atomic_base (used internally by std::atomic)

OrderedLoadStore = (
               Module = "*",
               Function = "std::__atomic_base<%>::exchange",
               CallingConvention = thiscall,
               ParametersOfInterest = (
                              Object = (this, pointer),
                              Order = (2, int),
               ),
               Succeed = (always),
);

OrderedLoad = (
               Module = "*",
               Function = "std::__atomic_base<%>::load",
               CallingConvention = thiscall,
               ParametersOfInterest = (
                              Object = (this, pointer),
                              Order = (1, int),
               ),
               Succeed = (always),
);

OrderedStore = (
               Module = "*",
               Function = "std::__atomic_base<%>::store",
               CallingConvention = thiscall,
               ParametersOfInterest = (
                              Object = (this, pointer),
                              Order = (2, int),
               ),
               Succeed = (always),
);


#This function compares data atomicaly, success and failure ordering has no effect on analysis
#Assume 'Order' argument is always std::memory_order_seq_cst
OrderedLoadStore = (
               Module = "*",
               Function = "std::__atomic_base<%>::compare_exchange_%",
               CallingConvention = thiscall,
               ParametersOfInterest = (
                              Object = (this, pointer),
                              Order = (constant_int, 5),
               ),
               Succeed = (always),
);

#Assume 'Order' argument is always std::memory_order_seq_cst
OrderedLoadStore = (
               Module = "*",
               Function = "std::__atomic_base<%>::operator%",
               CallingConvention = thiscall,
               ParametersOfInterest = (
                              Object = (this, pointer),
                              Order = (constant_int, 5),
               ),
               Succeed = (always),
);

#Assume 'Order' argument is always std::memory_order_seq_cst
OrderedLoadStore = (
               Module = "*",
               Function = "std::__atomic_base<%>::fetch_%",
               CallingConvention = thiscall,
               ParametersOfInterest = (
                              Object = (this, pointer),
                              Order = (constant_int, 5),
               ),
               Succeed = (always),
);
