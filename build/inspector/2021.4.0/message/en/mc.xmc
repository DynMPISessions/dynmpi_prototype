<?xml version="1.0" encoding="utf-8" ?>
<!--

 Copyright Â© 2009-2021 Intel Corporation. All rights reserved.

 The information contained herein is the exclusive property of
 Intel Corporation and may not be disclosed, examined, or reproduced in
 whole or in part without explicit written authorization from the Company.

-->
<xmc version="1.0">
  <catalog name="mc" lang="en">
       <msg name='EXEC_OF_INTEREST'> Analysis started for <arg name='path' /> (pid = <arg name='pid' />) </msg>
       <msg name='MODULE_LOAD'> Loaded module: <arg name='path' />, address range [<arg name='addr1' />-<arg name='addr2' />] </msg>
       <msg name='MODULE_UNLOAD'> Unloaded module: <arg name='path' /> </msg>
       <msg name='CHILD_PROC_IGNORED'> Started process <arg name='path' /> without further analysis </msg>
       <msg name='CHILD_PROCESS'> Process <arg name='path'/> (pid = <arg name='pid' />) created child process <arg name='child' />, pid = <arg name='childpid' /> </msg>
       <msg name='MIN_EXEC_OF_INTEREST'> Started process <arg name='path' /> (pid = <arg name='pid' />) with minimal analysis </msg>
       <msg name='OUT_OF_MEMORY'> Out of memory </msg>
       <msg name='PROCESS_COMPLETE'> Process <arg name='path' /> exited with code <arg name='code' />. Leak analysis starting. Please wait... </msg>
       <msg name='ANALYSIS_COMPLETE'> Completed analysis for <arg name='path' /> </msg>
       <msg name='INTERNAL_PARSE_ERR'> Internal parsing error: <arg name='string' /> </msg>
       <msg name='NO_EXE'> No executable specified for analysis </msg>
       <msg name='MODULE_LOAD_NO_ANALYSIS'> Loaded module: <arg name='path' />, address range [<arg name='addr1' />-<arg name='addr2' />], minimal analysis </msg>
       <msg name='CMDHANDLER_INIT_FAIL'> Internal initialization failure </msg>
       <msg name='DOT_NET_FOUND'> This process uses <arg name='string' />, which indicates the presence of managed code. During memory error analysis, <arg name='prod_name' /> cannot analyze stack accesses on managed applications. <arg name='prod_name' /> partially restarted the memory error analysis to not analyze stack accesses. Suggestion: Do not analyze stack accesses when performing memory error analyses on managed applications. </msg>
       <msg name='APPDEBUG_STOPPED_WAIT'> <arg name='string' />    - waiting for debugger to connect... </msg>
       <msg name='APPDEBUG_CONNECT_PORT'> Debugger connection port: <arg name='port' />  (pid = <arg name='pid' />) </msg>
       <msg name='FORK_PROCESS'> Process <arg name='path' /> (pid = <arg name='pid' />) forked a child process, pid = <arg name='childpid' /> </msg>
       <msg name='EXECED_PROC'> Process <arg name='path' /> (pid = <arg name='pid' />) created by a successful exec </msg>
       <msg name='APPDEBUG_CONNECT_PROMPT'> If you chose to start the debugger manually or the debugger does not appear due to an error, start a supported debugger now and enter the following command at the debugger prompt:  target remote :<arg name='string' /> </msg>
       <msg name='APPDEBUG_BREAKPOINT_HIT'> Debugger breakpoint hit (pid=<arg name='pid' />, diag_id=<arg name='diagid' />, problemType=<arg name='probtype' />, rva=<arg name='rva' />) </msg>
       <msg name='FATAL_EXCEPTION'> Detected fatal exception in the application.  See result for details. </msg>
       <msg name='FATAL_SIGNAL'> Detected fatal signal in the application.  See result for details. </msg>
       <msg name='SETBASELINE_RECEIVED'> Set baseline received (pid=<arg name='pid' />, clientId=<arg name='clientid' />, seqNo=<arg name='seqno' />) </msg>
       <msg name='SETBASELINE_COMPLETE'> Set baseline complete (pid=<arg name='pid' />, clientId=<arg name='clientid' />, seqNo=<arg name='seqno' />) </msg>
       <msg name='INTLEAK_REPORT_RECEIVED'> Intermediate Leak Report received (pid=<arg name='pid' />, clientId=<arg name='clientid' />, seqNo=<arg name='seqno' />) </msg>
       <msg name='INTLEAK_REPORT_COMPLETE'> Intermediate Leak Report complete (pid=<arg name='pid' />, clientId=<arg name='clientid' />, seqNo=<arg name='seqno' />) </msg>
       <msg name='TOO_MANY_LEAKS'> Too many memory leaks. Cannot report more than <arg name='count' />. Suggestion:  use the appropriate deallocator to deallocate memory when no longer needed. </msg>
       <msg name='BREAKFILE_COMMAND_RECEIVED'> Breakpoint-file received (pid=<arg name='pid' />, clientId=<arg name='clientid' />, seqNo=<arg name='seqno' />) </msg>
       <msg name='BREAKFILE_COMMAND_COMPLETE'> Breakpoint-file complete (pid=<arg name='pid' />, clientId=<arg name='clientid' />, seqNo=<arg name='seqno' />) </msg>
       <msg name='ENABLE_COMMAND_RECEIVED'> Enable analysis received (pid=<arg name='pid' />, clientId=<arg name='clientid' />, seqNo=<arg name='seqno' />) </msg>
       <msg name='ENABLE_COMMAND_COMPLETE'> Enable analysis complete (pid=<arg name='pid' />, clientId=<arg name='clientid' />, seqNo=<arg name='seqno' />) </msg>
       <msg name='DNPROFILER_INIT_FAIL'> Internal CLR profiler initialization failure </msg>
       <msg name='BRKPT_MODULE_NOT_LOADED'> One or more problem breakpoints was defined for this application module that was never loaded: <arg name='module' />. </msg>
       <msg name='PAUSE_RESUME_ERROR'> itt_suppress_pop: Cannot find matching itt_suppress_push. Pop must be called by the same thread that called itt_suppress_push. </msg>
       <msg name='MARK_CLEAR_ERROR'> itt_suppress_clear_range: Cannot find matching range. All parameters must match the parameters used in a prior call to itt_suppress_mark_range. </msg>
       <msg name='INVALID_RANGE'> itt_suppress_mark_range: Illegal range specified. The range overlaps a previously marked address range. </msg>
       <msg name='BRKPT_SUPPRESSION_QUERY'> Query if problem is suppressed or not. (tid=<arg name='tid' />, diag_id=<arg name='diagid' />) </msg>
       <msg name='MAX_SUPPRESS_RANGE'> itt_suppress_mark/clear_range: Ignored the itt_suppress_mark/clear_range call because it exceeds the maximum range limit of 2GB. Set the address to 0 and size to 0 to suppress the entire address space. </msg>
       <msg name='RESETLEAK_RECEIVED'> Leak tracking reset started (pid=<arg name='pid' /> clientId=<arg name='clientid' /> seqNo=<arg name='seqno' />) </msg>
       <msg name='RESETLEAK_COMPLETE'> Leak tracking reset complete (pid=<arg name='pid' /> clientId=<arg name='clientid' /> seqNo=<arg name='seqno' />) </msg>
       <msg name='FINDLEAK_RECEIVED'> Searching for memory leaks (pid=<arg name='pid' /> clientId=<arg name='clientid' /> seqNo=<arg name='seqno' />) </msg>
       <msg name='FINDLEAK_COMPLETE'> Leak search complete (pid=<arg name='pid' /> clientId=<arg name='clientid' /> seqNo=<arg name='seqno' />) </msg>
       <msg name='RESETGROWTH_RECEIVED'> Growth tracking reset started  (pid=<arg name='pid' /> clientId=<arg name='clientid' /> seqNo=<arg name='seqno' />) </msg>
       <msg name='RESETGROWTH_COMPLETE'> Growth tracking reset complete (pid=<arg name='pid' /> clientId=<arg name='clientid' /> seqNo=<arg name='seqno' />) </msg>
       <msg name='MEASUREGROWTH_RECEIVED'> Growth measurement started   (pid=<arg name='pid' /> clientId=<arg name='clientid' /> seqNo=<arg name='seqno' />) </msg>
       <msg name='MEASUREGROWTH_COMPLETE'> Growth measurement complete  (pid=<arg name='pid' /> clientId=<arg name='clientid' /> seqNo=<arg name='seqno' />) </msg>
  </catalog>
</xmc>
